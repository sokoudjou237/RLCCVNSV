import unittest
import numpy as np
from convert import get_vehicle_intensity
from Tracking_YOLOv3 import*

class Test(unittest.TestCase):

    def test_get_vehicle_intensity(self):
        videopath = '1.mp4'
        vehicle_timestamps = {'car_1': [0.27 + 1, 4.83 - 1], 'car_2': [10.6 + 1, 14.2 - 1]}
        vehicle_speeds = {'car_1': 30, 'car_2': 40}

        # Appeler la fonction et récupérer les intensités sonores
        intensities = get_vehicle_intensity(videopath, vehicle_timestamps, vehicle_speeds)

        # Vérifier que les intensités sont des instances de numpy.ndarray
        self.assertIsInstance(intensities, np.ndarray)

        # Vérifier que la longueur du tableau des intensités correspond au nombre de véhicules
        self.assertEqual(len(intensities), len(vehicle_timestamps))

    def test_transform_list_to_dict(self):
        input_list = [['car_1', (1753, 775)], ['car_1', (1753, 776)], ['car_1', (1751, 778)], ['car_1', (1721, 777)], ['car_1', (1705, 780)], ['car_1', (1699, 783)], ['car_1', (1686, 782)], ['car_1', (1678, 784)], ['car_1', (1671, 783)], ['car_1', (1664, 784)], ['car_1', (1650, 786)], ['car_1', (1638, 787)], ['car_1', (1628, 788)], ['car_1', (1618, 788)], ['car_1', (1609, 788)], ['car_1', (1597, 788)], ['car_1', (1582, 790)], ['car_1', (1570, 791)], ['car_1', (1557, 791)], ['car_1', (1545, 791)], ['car_1', (1536, 791)], ['car_1', (1524, 792)], ['car_1', (1508, 792)], ['car_1', (1496, 792)], ['car_1', (1482, 793)], ['car_1', (1469, 792)], ['car_1', (1456, 789)], ['car_1', (1441, 789)], ['car_1', (1426, 789)], ['car_1', (1413, 790)], ['car_1', (1404, 788)], ['car_1', (1391, 788)], ['car_1', (1377, 789)], ['car_1', (1357, 789)], ['car_1', (1344, 797)], ['car_1', (1334, 799)], ['car_1', (1317, 800)], ['car_1', (1306, 801)], ['car_1', (1291, 797)], ['car_1', (1275, 800)], ['car_1', (1263, 802)], ['car_1', (1245, 802)], ['car_1', (1234, 804)], ['car_1', (1218, 799)], ['car_1', (1203, 802)], ['car_1', (1180, 804)], ['car_1', (1167, 804)], ['car_1', (1157, 805)], ['car_1', (1139, 800)], ['car_1', (1123, 803)], ['car_1', (1103, 804)], ['car_1', (1088, 800)], ['car_1', (1074, 798)], ['car_1', (1059, 797)], ['car_1', (1042, 795)], ['car_1', (1024, 801)], ['car_1', (1011, 804)], ['car_1', (995, 800)], ['car_1', (978, 804)], ['car_1', (965, 799)], ['car_1', (945, 798)], ['car_1', (928, 796)], ['car_1', (915, 795)], ['car_1', (896, 795)], ['car_1', (878, 798)], ['car_1', (863, 798)], ['car_1', (845, 797)], ['car_1', (828, 797)], ['car_1', (816, 797)], ['car_1', (799, 797)], ['car_1', (784, 795)], ['car_1', (767, 793)], ['car_1', (749, 792)], ['car_1', (732, 795)], ['car_1', (720, 794)], ['car_1', (704, 792)], ['car_1', (688, 791)], ['car_1', (672, 793)], ['car_1', (657, 794)], ['car_1', (642, 793)], ['car_1', (628, 791)], ['car_1', (610, 789)], ['car_1', (597, 789)], ['car_1', (581, 791)], ['car_1', (563, 789)], ['car_1', (549, 787)], ['car_1', (534, 788)], ['car_1', (521, 787)], ['car_1', (507, 788)], ['car_1', (493, 785)], ['car_1', (478, 785)], ['car_1', (464, 784)], ['car_1', (449, 789)], ['car_1', (433, 789)], ['car_1', (419, 790)], ['car_1', (409, 790)], ['car_1', (392, 789)], ['car_1', (378, 790)], ['car_1', (364, 788)], ['car_1', (351, 786)], ['car_1', (338, 785)], ['car_1', (325, 785)], ['car_1', (314, 784)], ['car_1', (303, 782)], ['car_1', (289, 780)], ['car_1', (279, 779)], ['car_1', (267, 776)], ['car_1', (252, 776)], ['car_1', (241, 775)], ['car_1', (231, 774)], ['car_1', (223, 771)], ['car_1', (211, 772)], ['car_1', (204, 770)], ['car_1', (194, 767)], ['car_1', (187, 766)], ['car_1', (174, 754)], ['car_1', (162, 748)], ['car_1', (154, 749)], ['car_1', (141, 751)], ['car_1', (134, 758)], ['car_1', (125, 761)], ['car_1', (121, 756)], ['car_1', (117, 752)], ['car_1', (101, 753)], ['car_1', (92, 752)], ['car_1', (85, 752)], ['car_1', (81, 751)], ['car_1', (81, 747)], ['car_1', (78, 746)], ['car_1', (68, 746)], ['car_1', (64, 746)], ['car_1', (59, 743)], ['car_1', (54, 743)], ['car_1', (50, 741)], ['car_1', (41, 739)], ['car_2', (1692, 768)], ['car_2', (1683, 769)], ['car_2', (1672, 770)], ['car_2', (1657, 769)], ['car_2', (1646, 770)], ['car_2', (1634, 771)], ['car_2', (1620, 772)], ['car_2', (1607, 773)], ['car_2', (1596, 774)], ['car_2', (1580, 773)], ['car_2', (1565, 775)], ['car_2', (1553, 775)], ['car_2', (1540, 775)], ['car_2', (1526, 776)], ['car_2', (1517, 776)], ['car_2', (1498, 777)], ['car_2', (1482, 780)], ['car_2', (1468, 779)], ['car_2', (1450, 782)], ['car_2', (1433, 783)], ['car_2', (1419, 785)], ['car_2', (1400, 787)], ['car_2', (1388, 788)], ['car_2', (1374, 788)], ['car_2', (1354, 790)], ['car_2', (1337, 791)], ['car_2', (1322, 791)], ['car_2', (1305, 791)], ['car_2', (1286, 792)], ['car_2', (1268, 792)], ['car_2', (1249, 792)], ['car_2', (1235, 792)], ['car_2', (1223, 791)], ['car_2', (1198, 792)], ['car_2', (1177, 799)], ['car_2', (1163, 802)], ['car_2', (1139, 804)], ['car_2', (1120, 803)], ['car_2', (1101, 804)], ['car_2', (1083, 804)], ['car_2', (1062, 806)], ['car_2', (1045, 805)], ['car_2', (1024, 805)], ['car_2', (1008, 804)], ['car_2', (989, 805)], ['car_2', (969, 804)], ['car_2', (948, 805)], ['car_2', (932, 805)], ['car_2', (909, 805)], ['car_2', (894, 805)], ['car_2', (872, 805)], ['car_2', (856, 806)], ['car_2', (834, 806)], ['car_2', (818, 805)], ['car_2', (795, 805)], ['car_2', (779, 804)], ['car_2', (759, 806)], ['car_2', (733, 805)], ['car_2', (717, 804)], ['car_2', (699, 795)], ['car_2', (678, 801)], ['car_2', (655, 795)], ['car_2', (639, 792)], ['car_2', (619, 799)], ['car_2', (604, 795)], ['car_2', (583, 793)], ['car_2', (564, 791)], ['car_2', (545, 791)], ['car_2', (531, 791)], ['car_2', (510, 791)], ['car_2', (497, 791)], ['car_2', (485, 790)], ['car_2', (463, 789)], ['car_2', (447, 789)], ['car_2', (430, 789)], ['car_2', (414, 788)], ['car_2', (398, 787)], ['car_2', (382, 785)], ['car_2', (362, 784)], ['car_2', (348, 782)], ['car_2', (336, 781)], ['car_2', (319, 781)], ['car_2', (304, 779)], ['car_2', (287, 777)], ['car_2', (273, 775)], ['car_2', (264, 773)], ['car_2', (244, 773)], ['car_2', (235, 772)], ['car_2', (214, 771)], ['car_2', (202, 771)], ['car_2', (190, 769)], ['car_2', (175, 769)], ['car_2', (164, 768)], ['car_2', (154, 765)], ['car_2', (136, 764)], ['car_2', (124, 764)], ['car_2', (114, 764)], ['car_2', (98, 764)], ['car_2', (94, 756)], ['car_2', (84, 753)], ['car_2', (69, 753)], ['car_2', (62, 752)], ['car_2', (55, 751)], ['car_2', (49, 750)], ['car_2', (42, 747)], ['car_2', (37, 746)], ['car_2', (34, 743)], ['car_2', (27, 742)]]
        expected_output = {'car_1': [(1753, 775), (1753, 776), (1751, 778), (1721, 777), (1705, 780), (1699, 783), (1686, 782), (1678, 784), (1671, 783), (1664, 784), (1650, 786), (1638, 787), (1628, 788), (1618, 788), (1609, 788), (1597, 788), (1582, 790), (1570, 791), (1557, 791), (1545, 791), (1536, 791), (1524, 792), (1508, 792), (1496, 792), (1482, 793), (1469, 792), (1456, 789), (1441, 789), (1426, 789), (1413, 790), (1404, 788), (1391, 788), (1377, 789), (1357, 789), (1344, 797), (1334, 799), (1317, 800), (1306, 801), (1291, 797), (1275, 800), (1263, 802), (1245, 802), (1234, 804), (1218, 799), (1203, 802), (1180, 804), (1167, 804), (1157, 805), (1139, 800), (1123, 803), (1103, 804), (1088, 800), (1074, 798), (1059, 797), (1042, 795), (1024, 801), (1011, 804), (995, 800), (978, 804), (965, 799), (945, 798), (928, 796), (915, 795), (896, 795), (878, 798), (863, 798), (845, 797), (828, 797), (816, 797), (799, 797), (784, 795), (767, 793), (749, 792), (732, 795), (720, 794), (704, 792), (688, 791), (672, 793), (657, 794), (642, 793), (628, 791), (610, 789), (597, 789), (581, 791), (563, 789), (549, 787), (534, 788), (521, 787), (507, 788), (493, 785), (478, 785), (464, 784), (449, 789), (433, 789), (419, 790), (409, 790), (392, 789), (378, 790), (364, 788), (351, 786), (338, 785), (325, 785), (314, 784), (303, 782), (289, 780), (279, 779), (267, 776), (252, 776), (241, 775), (231, 774), (223, 771), (211, 772), (204, 770), (194, 767), (187, 766), (174, 754), (162, 748), (154, 749), (141, 751), (134, 758), (125, 761), (121, 756), (117, 752), (101, 753), (92, 752), (85, 752), (81, 751), (81, 747), (78, 746), (68, 746), (64, 746), (59, 743), (54, 743), (50, 741), (41, 739)], 'car_2': [(1692, 768), (1683, 769), (1672, 770), (1657, 769), (1646, 770), (1634, 771), (1620, 772), (1607, 773), (1596, 774), (1580, 773), (1565, 775), (1553, 775), (1540, 775), (1526, 776), (1517, 776), (1498, 777), (1482, 780), (1468, 779), (1450, 782), (1433, 783), (1419, 785), (1400, 787), (1388, 788), (1374, 788), (1354, 790), (1337, 791), (1322, 791), (1305, 791), (1286, 792), (1268, 792), (1249, 792), (1235, 792), (1223, 791), (1198, 792), (1177, 799), (1163, 802), (1139, 804), (1120, 803), (1101, 804), (1083, 804), (1062, 806), (1045, 805), (1024, 805), (1008, 804), (989, 805), (969, 804), (948, 805), (932, 805), (909, 805), (894, 805), (872, 805), (856, 806), (834, 806), (818, 805), (795, 805), (779, 804), (759, 806), (733, 805), (717, 804), (699, 795), (678, 801), (655, 795), (639, 792), (619, 799), (604, 795), (583, 793), (564, 791), (545, 791), (531, 791), (510, 791), (497, 791), (485, 790), (463, 789), (447, 789), (430, 789), (414, 788), (398, 787), (382, 785), (362, 784), (348, 782), (336, 781), (319, 781), (304, 779), (287, 777), (273, 775), (264, 773), (244, 773), (235, 772), (214, 771), (202, 771), (190, 769), (175, 769), (164, 768), (154, 765), (136, 764), (124, 764), (114, 764), (98, 764), (94, 756), (84, 753), (69, 753), (62, 752), (55, 751), (49, 750), (42, 747), (37, 746), (34, 743), (27, 742)]}

        # Appeler la fonction transform_to_dict
        output = transform_list_to_dict(input_list)

        # Vérifier que le résultat est un dictionnaire
        self.assertIsInstance(output, dict)

        # Vérifier que le dictionnaire obtenu correspond au résultat attendu
        self.assertDictEqual(output, expected_output)

    def test_detect_image(self):
        # Charger une image exemple
        img_path = "images/blueangels.jpg"
        img = Image.open(img_path)

        # Appeler la fonction detect_image
        detections = detect_image(img)

        # Vérifier que les détections sont une instance de torch.Tensor
        self.assertIsInstance(detections, torch.Tensor)

    def test_tracking(self):
        # Charger une vidéo exemple
        videopath = "1.mp4"

        # Appeler la fonction tracking
        dict_v, vehicle_timestamps = tracking(videopath)

        # Vérifier que dict_v est un dictionnaire
        self.assertIsInstance(dict_v, dict)

if __name__ == '__main__':
    unittest.main()